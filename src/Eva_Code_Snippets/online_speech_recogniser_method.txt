       private static async Task<bool> Initiate_The_Online_Speech_Recognition_Engine()
        {
            try
            {
                online_speech_recognition_timeout = DateTime.Now;
                Online_Speech_Recogniser_Activation_Delay_Detector = DateTime.Now;

                using (Windows.Media.SpeechRecognition.SpeechRecognizer OnlineSpeechRecognition = new Windows.Media.SpeechRecognition.SpeechRecognizer())
                {
                    Constraints.Probability = Windows.Media.SpeechRecognition.SpeechRecognitionConstraintProbability.Max;
                    OnlineSpeechRecognition.Constraints.Add(Constraints);

                    Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult ConstratintsCompilation = await OnlineSpeechRecognition.CompileConstraintsAsync();


                    switch (ConstratintsCompilation.Status == Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus.Success)
                    {
                        case true:
                            OnlineSpeechRecognition.StateChanged += OnlineSpeechRecognition_StateChanged;
                            OnlineSpeechRecognition.Timeouts.BabbleTimeout = TimeSpan.FromSeconds(9);
                            OnlineSpeechRecognition.Timeouts.EndSilenceTimeout = TimeSpan.FromSeconds(9);
                            OnlineSpeechRecognition.Timeouts.InitialSilenceTimeout = TimeSpan.FromSeconds(9);


                            Windows.Media.SpeechRecognition.SpeechRecognitionResult Result = await OnlineSpeechRecognition.RecognizeAsync();
                            await OS_Online_Speech_Recognition_Interface_Shutdown_Or_Refresh(Online_Speech_Recognition_Interface_Operation.Online_Speech_Recognition_Interface_Clear_Cache);

                            System.Diagnostics.Debug.WriteLine("Result: " + Result.Text);
                            switch (Result.Status == Windows.Media.SpeechRecognition.SpeechRecognitionResultStatus.Success)
                            {
                                case true:
                                   
                                    switch ((Result.Text == String.Empty) || (Result == null))
                                    {
                                        case true:
                                            if (OnlineSpeechRecognition != null)
                                            {
                                                await OnlineSpeechRecognition.StopRecognitionAsync();
                                                OnlineSpeechRecognition.Dispose();
                                            }
                                            break;


                                        case false:

                                            lock (Online_Speech_Recogniser_Disabled)
                                            {
                                                lock (Window_Minimised)
                                                {
                                                    if (Window_Minimised == "true" || Online_Speech_Recogniser_Disabled == "true")
                                                    {
                                                        goto Function_Not_Initiated;
                                                    }
                                                }
                                            }

                                            await Natural_Language_Processing_Mitigator.PreProcessing_Initiation(Result.Text.ToLower());

                                        Function_Not_Initiated:
                                            if (OnlineSpeechRecognition != null)
                                            {
                                                await OnlineSpeechRecognition.StopRecognitionAsync();
                                                OnlineSpeechRecognition.Dispose();
                                            }
                                            break;
                                    }
                                    break;



                                case false:
                                    if(OnlineSpeechRecognition != null)
                                    {
                                        await OnlineSpeechRecognition.StopRecognitionAsync();
                                        OnlineSpeechRecognition.Dispose();
                                    }
                                    break;
                            }
                            break;

                        case false:
                            if (OnlineSpeechRecognition != null)
                            {
                                await OnlineSpeechRecognition.StopRecognitionAsync();
                                OnlineSpeechRecognition.Dispose();
                            }
                            break;

                    }

                }

            }
            catch (Exception E)
            {
                if(E.HResult == -2147199735)
                {
                    if (App.PermisissionWindowOpen == false)
                    {
                        System.Windows.Application.Current.Dispatcher.Invoke(() =>
                        {
                            ErrorWindow OpenPermissionDeclinedWindow = new ErrorWindow("Online Speech Recognition Access Denied");
                            OpenPermissionDeclinedWindow.Show();
                        });
                    }
                }
            }

            lock (Online_Speech_Recogniser_Listening)
            {
                Online_Speech_Recogniser_Listening = "false";
                Online_Speech_Recogniser_Activation_Delay_Detector = DateTime.Now;
            }

            return true;
        }